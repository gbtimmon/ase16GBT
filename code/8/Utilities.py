eucledianDistance=lambda x,y:  sum(map(lambda xi,yi: (xi-yi)**2, x, y))**0.5

def spread(paretoFrontierScores, referenceSetScores):
    """Spread is also known as diversity. It is calculated for a set of objectiveScores.
    """
    # Sort the paretoFrontierScores based on the weight of each participating objective.
    objectiveScores = (0.02095599670188364, 0.6778384360925239, 0.7857142857142857, 0.0)
    weights = map(lambda i: 10 ** (len(objectiveScores) - i - 1), xrange(len(objectiveScores)))
    sortingkey = lambda objectiveScores: sum(map(lambda os, w: os * w, objectiveScores, weights))
    sortedParetoFrontierScores = sorted(paretoFrontierScores, key=sortingkey)
    sortedReferenceSetScores = sorted(referenceSetScores, key=sortingkey)
    distanceFromFirstReferenceObjectiveScores = \
    closestVector(sortedReferenceSetScores[0], sortedParetoFrontierScores)[0]
    distanceFromLastRefenceObjectiveScores = \
    closestVector(sortedReferenceSetScores[-1], sortedParetoFrontierScores)[0]
    gaps = [eucledianDistance(sortedParetoFrontierScores[i], sortedParetoFrontierScores[i + 1]) for i in
            xrange(len(sortedParetoFrontierScores) - 1)]
    averageGap = sum(gaps) / len(gaps)
    gapAbsoluteDeviationSum = sum([abs(gap - averageGap) for gap in gaps])
    return (
           distanceFromFirstReferenceObjectiveScores + distanceFromLastRefenceObjectiveScores + gapAbsoluteDeviationSum) / (
           distanceFromFirstReferenceObjectiveScores + distanceFromLastRefenceObjectiveScores + (
           len(sortedParetoFrontierScores) - 1) * averageGap)


def interGenerationalDistance(paretoFrontierScores, referenceSetScores):
    """Inter generational distance - it is a measure of how good are you to the best known ?
    """
    return sum([closestVector(other, paretoFrontierScores)[0] for other in referenceSetScores]) / len(
        referenceSetScores)

def closestVector(x,Y):
    """Closest eucledian point from  point x.
    """
    return min([ ( sum(map(lambda xi,yi:  (yi-xi)**2, y, x))**0.5, y ) for y in Y ], key=lambda x: x[0])

if __name__ == "__main__":
    paretoFrontier1=[[0.02095599670188364, 0.6778384360925239, 0.7857142857142857, 0.0], [0.034180361870042086, 0.5245208866135824, 0.8840579710144928, 0.1029411764705882], [0.02460798746756646, 0.6521854957069885, 1.0, 0.30000000000000004], [0.02189842089944057, 0.5463625723374128, 0.6833333333333333, 0.046511627906976716], [0.03164888468336628, 0.383529865014307, 0.8513513513513513, 0.08695652173913049], [0.06454575880596088, 0.5903604706736836, 0.7592592592592593, 0.0888888888888889], [0.0915939211696852, 0.5201361891509115, 0.8497109826589595, 0.10365853658536583], [0.030876798455713686, 0.5110022993045705, 0.8301886792452831, 0.29032258064516125], [0.05191147906812763, 0.49380105682129466, 1.0, 0.0], [0.009234201362161954, 0.5003031613530177, 0.5, 0.0]]
    paretoFrontier2=[[0.08738234913396675, 0.653748187881778, 0.712707182320442, 0.0], [0.09958142712660678, 0.772687573987016, 0.6884057971014492, 0.0], [0.06966259780901314, 0.5721201437854408, 0.9736842105263158, 0.22916666666666663], [0.04042797689964187, 0.5813219864656675, 0.7777777777777778, 0.0], [0.04313029690826623, 0.5991287479074885, 0.75, 0.0], [0.055610178628247874, 0.7660031282960829, 0.9285714285714286, 0.5357142857142857], [0.07798260806583651, 0.4374363614005098, 0.9435483870967742, 0.26875000000000004], [0.10299750041157082, 0.5396698782151578, 0.6608695652173913, 0.0], [0.09873984318665308, 0.688981118336843, 0.9225806451612903, 0.192090395480226], [0.0432321245546386, 0.687228966713076, 0.9230769230769231, 0.2941176470588235]]
    paretoFrontier3=[[0.018667164751246072, 0.6725435355538931, 1.0, 0.0], [0.03236982922166506, 0.8929704175715291, 1.0, 0.0], [0.012577365172705437, 0.5902742693038511, 0.9166666666666666, 0.0], [0.030033915594442736, 0.7243922217565271, 0.9166666666666666, 0.47619047619047616], [0.016242942533825754, 0.7450106084771029, 0.8888888888888888, 0.33333333333333337], [0.031970980789334746, 0.6408347041400978, 0.8947368421052632, 0.0], [0.07765335322416529, 0.5706053874436364, 0.8695652173913043, 0.0], [0.03600347879002345, 0.720057256147724, 0.8888888888888888, 0.6190476190476191], [0.019042558918572212, 0.5815385685664295, 0.9574468085106383, 0.27419354838709675], [0.018872487087262576, 0.5309957865555107, 1.0, 0.3157894736842105]]
    referenceSet=[[0.018667164751246072, 0.6725435355538931, 1.0, 0.0], [0.03236982922166506, 0.8929704175715291, 1.0, 0.0], [0.012577365172705437, 0.5902742693038511, 0.9166666666666666, 0.0], [0.031970980789334746, 0.6408347041400978, 0.8947368421052632, 0.0], [0.02095599670188364, 0.6778384360925239, 0.7857142857142857, 0.0], [0.07765335322416529, 0.5706053874436364, 0.8695652173913043, 0.0], [0.09958142712660678, 0.772687573987016, 0.6884057971014492, 0.0], [0.08738234913396675, 0.653748187881778, 0.712707182320442, 0.0], [0.06966259780901314, 0.5721201437854408, 0.9736842105263158, 0.22916666666666663], [0.05191147906812763, 0.49380105682129466, 1.0, 0.0]]

    ps = [paretoFrontier1, paretoFrontier2, paretoFrontier3]
    for p in ps:
        print(spread(p, referenceSet))
        print(interGenerationalDistance(p, referenceSet))

